# This file is part of felis.
#
# Developed for the LSST Data Management System.
# This product includes software developed by the LSST Project
# (https://www.lsst.org).
# See the COPYRIGHT file at the top-level directory of this distribution
# for details of code ownership.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import unittest
from collections.abc import Iterable, MutableMapping, Sequence
from typing import Any

import yaml

from felis import DEFAULT_FRAME, types
from felis.simple import ForeignKeyConstraint, SimpleVisitor, UniqueConstraint

TESTDIR = os.path.abspath(os.path.dirname(__file__))
TEST_YAML = os.path.join(TESTDIR, "data", "test.yml")


def _names(items: Iterable) -> Sequence[str]:
    """Return names of items."""
    return [item.name for item in items]


class VisitorTestCase(unittest.TestCase):
    """Tests for both SimpleVisitor classes."""

    schema_obj: MutableMapping[str, Any] = {}

    def setUp(self) -> None:
        """Load data from test file."""
        with open(TEST_YAML) as test_yaml:
            self.schema_obj = yaml.load(test_yaml, Loader=yaml.SafeLoader)
            self.schema_obj.update(DEFAULT_FRAME)

    def test_schema(self) -> None:
        """Check schema generated by SimpleVisitor class."""
        visitor = SimpleVisitor()
        schema = visitor.visit_schema(self.schema_obj)

        self.assertIsNotNone(schema)
        self.assertEqual(schema.name, "sdqa")

        self.assertIsNotNone(schema.version)
        assert schema.version is not None, "cannot be None"
        self.assertEqual(schema.version.current, "1.2.3")
        assert schema.version.compatible is not None, "cannot be None"
        self.assertEqual(set(schema.version.compatible), {"1.2.0", "1.2.1", "1.2.2"})
        assert schema.version.read_compatible is not None, "cannot be None"
        self.assertEqual(set(schema.version.read_compatible), {"1.1.0", "1.1.1"})

        self.assertIsNotNone(schema.tables)
        table_names = [
            "sdqa_ImageStatus",
            "sdqa_Metric",
            "sdqa_Rating_ForAmpVisit",
            "sdqa_Rating_CcdVisit",
            "sdqa_Threshold",
        ]

        # Check schema.tables attribute.
        self.assertCountEqual(set(_names(schema.tables)), set(table_names))

        tables = {table.name: table for table in schema.tables}

        # Details of sdqa_ImageStatus table.
        table = tables["sdqa_ImageStatus"]
        self.assertEqual(_names(table.columns), ["sdqa_imageStatusId", "statusName", "definition"])
        self.assertEqual(
            [column.datatype for column in table.columns], [types.Short, types.String, types.String]
        )
        self.assertEqual([column.length for column in table.columns], [None, 30, 255])
        self.assertEqual(
            [column.annotations for column in table.columns],
            [
                {"mysql:datatype": "SMALLINT", "tap:principal": 1},
                {"mysql:datatype": "VARCHAR(30)"},
                {"mysql:datatype": "VARCHAR(255)"},
            ],
        )
        self.assertEqual(_names(table.primary_key), ["sdqa_imageStatusId"])
        self.assertFalse(table.indexes)
        self.assertEqual(table.annotations, {"mysql:engine": "MyISAM", "tap:table_index": 1})

        # Details of sdqa_Metric table.
        table = tables["sdqa_Metric"]
        self.assertEqual(
            _names(table.columns), ["sdqa_metricId", "metricName", "physicalUnits", "dataType", "definition"]
        )
        self.assertEqual(
            [column.datatype for column in table.columns],
            [types.Short, types.String, types.String, types.Char, types.String],
        )
        self.assertEqual([column.length for column in table.columns], [None, 30, 30, 1, 255])
        self.assertEqual(_names(table.primary_key), ["sdqa_metricId"])
        self.assertFalse(table.indexes)
        self.assertEqual(table.annotations, {"mysql:engine": "MyISAM", "tap:table_index": 2})

        # It defines a unique constraint.
        self.assertEqual(len(table.constraints), 1)
        constraint = table.constraints[0]
        self.assertIsInstance(constraint, UniqueConstraint)
        assert isinstance(constraint, UniqueConstraint)  # for mypy
        self.assertEqual(constraint.name, "UQ_sdqaMetric_metricName")
        self.assertEqual(_names(constraint.columns), ["metricName"])
        self.assertEqual(constraint.annotations, {})

        # Details of sdqa_Rating_ForAmpVisit table.
        table = tables["sdqa_Rating_ForAmpVisit"]
        self.assertEqual(
            _names(table.columns),
            [
                "sdqa_ratingId",
                "sdqa_metricId",
                "sdqa_thresholdId",
                "ampVisitId",
                "metricValue",
                "metricSigma",
            ],
        )
        self.assertEqual(_names(table.primary_key), ["sdqa_ratingId"])
        self.assertEqual(
            [column.datatype for column in table.columns],
            [types.Long, types.Short, types.Short, types.Long, types.Double, types.Double],
        )
        self.assertEqual(table.annotations, {"mysql:engine": "MyISAM", "tap:table_index": 3})

        # constraints
        self.assertEqual(len(table.constraints), 2)
        constraint = table.constraints[0]
        self.assertIsInstance(constraint, UniqueConstraint)
        assert isinstance(constraint, UniqueConstraint)  # for mypy
        self.assertEqual(constraint.name, "UQ_sdqaRatingForAmpVisit_metricId_ampVisitId")
        self.assertEqual(_names(constraint.columns), ["sdqa_metricId", "ampVisitId"])
        self.assertEqual(constraint.annotations, {})
        constraint = table.constraints[1]
        self.assertIsInstance(constraint, ForeignKeyConstraint)
        assert isinstance(constraint, ForeignKeyConstraint)  # for mypy
        self.assertEqual(constraint.name, "FK_sdqa_Rating_ForAmpVisit_sdqa_Metric")
        self.assertEqual(_names(constraint.columns), ["sdqa_metricId"])
        self.assertEqual(_names(constraint.referenced_columns), ["sdqa_metricId"])
        self.assertIs(constraint.referenced_columns[0].table, tables["sdqa_Metric"])
        self.assertEqual(constraint.annotations, {})

        # It has a bunch of indices.
        self.assertEqual(len(table.indexes), 3)
        index = table.indexes[0]
        self.assertEqual(index.name, "IDX_sdqaRatingForAmpVisit_metricId")
        self.assertEqual(_names(index.columns), ["sdqa_metricId"])
        self.assertEqual(index.annotations, {})
        index = table.indexes[1]
        self.assertEqual(index.name, "IDX_sdqaRatingForAmpVisit_thresholdId")
        self.assertEqual(_names(index.columns), ["sdqa_thresholdId"])
        self.assertEqual(index.annotations, {})
        index = table.indexes[2]
        self.assertEqual(index.name, "IDX_sdqaRatingForAmpVisit_ampVisitId")
        self.assertEqual(_names(index.columns), ["ampVisitId"])
        self.assertEqual(index.annotations, {})


if __name__ == "__main__":
    unittest.main()
